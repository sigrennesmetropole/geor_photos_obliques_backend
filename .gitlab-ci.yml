workflow:
  rules:
    # prevent branch pipeline when an MR is open (prefer MR pipeline)
    - if: '$CI_COMMIT_BRANCH && $CI_OPEN_MERGE_REQUESTS'
      when: never
    - when: always

# Pipeline variables
variables:
  MAVEN_PREVENT_RECOMPILE: "-Dmaven.compiler.useIncrementalCompilation=false"
  MAVEN_CLI_OPTS: "-s .m2/settings.xml -Dmaven.repo.local=.m2/repository --update-snapshots --activate-profiles prod --batch-mode --errors --fail-at-end --show-version -DinstallAtEnd=true -DdeployAtEnd=true  -DdeployAtEnd=true ${OPTS} $MAVEN_PREVENT_RECOMPILE"
  DOCKER_DISABLE: "true"

# Cache policy - Share target folders between jobs - Note that key is related to a commit and is purged automatically after pipeline execution
cache:
  key: ${CI_COMMIT_REF_SLUG}
  paths:
    - .m2/repository
    - $CI_PROJECT_DIR/.m2/repository/**/*

include:
  - project: 'boost/template-ci/pipelines/common'
    file: 'docker/docker-template.yml'
  - project: 'boost/template-ci/pipelines/common'
    file: 'securite/oss-index/oss-index-template.yml'
  - project: 'bots/trivy-script'
    file: '/trivy-template-job.yml'    

# - local: '.docker-build.yml'

default:
  image: maven:3.9.0-eclipse-temurin-17
  before_script:
    - apt update && apt install -y gettext-base
    - envsubst '${MVN_GROUP} ${MVN_RELEASE} ${MVN_SNAPSHOTS}' < pom.xml > pom.subst && mv -f pom.subst pom.xml

# Stages definition
stages:
  - compile
  - test
  - package
  - sast
  - pre_docker
  - docker
  - deploy
  - delivering

## #####
# Build job with maven plugin execution policies define in parent pom
photosobliquesapi:compile:
  script:
    - >
      mvn compile
      $MAVEN_CLI_OPTS
  stage: compile
  variables:
    OPTS: "-DskipTests"
  artifacts:
    paths:
      - '**/target'
  interruptible: true
  
photosobliquesapi:test-backend:
  stage: test
  needs:
    - photosobliquesapi:compile
  dependencies:
    - photosobliquesapi:compile
  except:
    refs:
      - master
      - open/master  
  script:
    - >
      mvn test
      $MAVEN_CLI_OPTS
      -Dmaven.source.skip=true
      -Dmaven.main.skip
  artifacts:
    paths:
      - '**/target/jacoco.exec'
      - '**/target/site/jacoco/**'
    reports:
      junit:
        - '**/target/surefire-reports/TEST-*.xml'
        - '**/target/surefire-reports/*.txt'        
  interruptible: true

## #####
# Package
.package:
  stage: package
  cache:
    policy: pull
    key: ${CI_COMMIT_REF_SLUG}
    paths:
      - .m2/repository
  interruptible: true

photosobliquesapi:package-backend:
  extends: .package
  needs:
    - photosobliquesapi:compile
  dependencies:
    - photosobliquesapi:compile
  script:
    - >
      mvn package
      $MAVEN_CLI_OPTS
      -Dmaven.source.skip=true
      -Dmaven.main.skip
      -Dmaven.test.skip=true
    - ls -l $CI_PROJECT_DIR/georchestra-photos-obliques-facade/target/
  artifacts:
    paths:
      - '$CI_PROJECT_DIR/georchestra-photos-obliques-facade/target/**/*.war'
      - '$CI_PROJECT_DIR/georchestra-photos-obliques-facade/target/**/*.jar'
      - '$CI_PROJECT_DIR/georchestra-photos-obliques-facade/target/**/*.zip'

## #####
# Sonar code quality analysis - note a full test coverage report through a jacoco.exec merged file in base project folder
.sonar:
  stage: test
  needs:
    - photosobliquesapi:compile
  dependencies:
    - photosobliquesapi:compile
  allow_failure: true
  cache:
    policy: pull
    key: ${CI_COMMIT_REF_SLUG}
    paths:
      - .m2/repository
  script:
    - >
      mvn -U compile sonar:sonar
      $MAVEN_CLI_OPTS
      -Dmaven.source.skip=true
      -Dmaven.main.skip
      -Dsonar.host.url=$SONAR_URL
      -Dsonar.login=$SONAR_TOKEN
      -Dsonar.gitlab.commit_sha=$CI_COMMIT_SHA
      -Dsonar.gitlab.ref_name=$CI_COMMIT_REF_NAME
      -Dsonar.gitlab.project_id=$CI_PROJECT_ID
      ${BRANCH}
  interruptible: true

photosobliquesapi:sonar:
  extends: .sonar
  except:
    refs:
      - master
      - open/master
  variables:
    BRANCH: -Dsonar.branch.name=$CI_COMMIT_REF_NAME

# On master, do not use branch parameter
photosobliquesapi:sonar:master:
  extends: .sonar
  only:
    refs:
      - open/master
      - master

## #####
# Images
photosobliquesapi:pre_docker:
  stage: pre_docker
  needs:
    - photosobliquesapi:package-backend
  dependencies:
    - photosobliquesapi:package-backend
  only:
    refs:
      - master
      - open/master
      - open/develop
      - /^release.*/
      - /.*karbonification.*/ 
  script:
    - ls -l $CI_PROJECT_DIR/georchestra-photos-obliques-facade/target/
    - cp $CI_PROJECT_DIR/georchestra-photos-obliques-facade/target/georchestra-photos-obliques-facade.jar $CI_PROJECT_DIR/docker/rennes-metropole
    - cp $CI_PROJECT_DIR/georchestra-photos-obliques-facade/target/georchestra-photos-obliques-facade.jar $CI_PROJECT_DIR/docker/template/photosobliques
  artifacts:
    paths:
      - '$CI_PROJECT_DIR/georchestra-photos-obliques-facade/target/**.war'
      - '$CI_PROJECT_DIR/georchestra-photos-obliques-facade/target/**.jar'
      - '$CI_PROJECT_DIR/georchestra-photos-obliques-facade/target/*.zip'
      - '$CI_PROJECT_DIR/docker/**/**.war'
      - '$CI_PROJECT_DIR/docker/**/**.zip'
      - '$CI_PROJECT_DIR/docker/**/**.jar'

photosobliquesapi:docker2:build:
  extends: ['.docker:build']
  needs:
    - photosobliquesapi:pre_docker
  dependencies:
    - photosobliquesapi:pre_docker
  rules:
    - if: '$CI_COMMIT_BRANCH =~ /.*develop/ || $CI_COMMIT_BRANCH =~ /.*master/ || $CI_COMMIT_BRANCH =~ /^release.*/ || $CI_COMMIT_BRANCH =~ /.*karbonification.*/'
  timeout: 1h
  artifacts:
    paths:
      - '$CI_PROJECT_DIR/georchestra-photos-obliques-facade/target/**.war'
      - '$CI_PROJECT_DIR/georchestra-photos-obliques-facade/target/**.jar'
      - '$CI_PROJECT_DIR/georchestra-photos-obliques-facade/target/*.zip'   
      - '$CI_PROJECT_DIR/docker/**/**.war'
      - '$CI_PROJECT_DIR/docker/**/**.zip'
      - '$CI_PROJECT_DIR/docker/**/**.jar'  

## #####
# Déploiement iaas
.photosobliquesapi:deploy:
  stage: deploy
  tags: 
   - iaas
  image: glregistry.boost.open.global/boost/docker/mvn-node-jdk11-ansible:latest
  needs:
    - photosobliquesapi:docker2:build
  dependencies:
    - photosobliquesapi:docker2:build
  when: manual
  before_script:
    - eval $(ssh-agent -s)
    - ssh-add <(echo "$ansible_private_key" | base64 -d)    
  script:
    - ls -l $CI_PROJECT_DIR/georchestra-photos-obliques-facade/target/*
    - cp -f $CI_PROJECT_DIR/georchestra-photos-obliques-facade/target/georchestra-photos-obliques-facade.jar $CI_PROJECT_DIR/ansible/dockerize/photosobliques.jar
    - cd $CI_PROJECT_DIR/ansible
    #- chmod og-rw key/id_rsa
    - cp photos-obliques_dev_var.yml $HOME/photos-obliques_var.yml
    - ansible-playbook photos-obliques-docker.yml -v -i "${TARGET_ENV}," -u root --ssh-common-args=-oStrictHostKeyChecking=no
  artifacts:
    paths:
      - '$CI_PROJECT_DIR/georchestra-photos-obliques-facade/target/**.war'
      - '$CI_PROJECT_DIR/georchestra-photos-obliques-facade/target/**.jar'
      - '$CI_PROJECT_DIR/georchestra-photos-obliques-facade/target/*.zip'   
      - '$CI_PROJECT_DIR/docker/**/**.war'
      - '$CI_PROJECT_DIR/docker/**/**.zip'
      - '$CI_PROJECT_DIR/docker/**/**.jar'

photosobliquesapi:deploy:
  extends: .photosobliquesapi:deploy
  stage: deploy
  only:
    refs:
      - open/develop
  variables:
    TARGET_ENV: REN1VML0096
    
photosobliquesapi:deploy:master:
  extends: .photosobliquesapi:deploy
  stage: deploy
  only:
    refs:
      - open/master
  variables:
    TARGET_ENV: REN1VML0095   

## #####
# Déploiement Karbon
.photosobliquesapi:deploy-karbon:prepare:
  stage: pre_docker
  script:
    - echo "send automation to georchestra deploiement"
  artifacts:
    name: photosobliques-karbon-${TARGET_ENV}
    paths:
      - '$CI_PROJECT_DIR/automation/**'

photosobliquesapi:deploy-karbon:prepare:dev:
  extends: .photosobliquesapi:deploy-karbon:prepare
  only:
    refs:
      - open/develop
      - /.*karbonification.*/ 
  variables:
    TARGET_ENV: dev
    
.photosobliquesapi:deploy-karbon:
  stage: deploy
  trigger: 
    project: rennes-metropole/georchestra/georchestra-service-deployment
    strategy: depend
    branch: master
  variables:
    TRIGGERED_BY: photosobliques
    PARENT_PIPELINE_ID: $CI_PIPELINE_ID
  
photosobliquesapi:deploy-karbon:dev:
  extends: .photosobliquesapi:deploy-karbon
  needs:
    - job: photosobliquesapi:deploy-karbon:prepare:dev
      artifacts: true
  only:
    refs:
      - open/develop
      - /.*karbonification.*/      
  variables:
    TARGET_ENV: dev
    FORCE_POD: "true"
    PARENT_COMMIT_BRANCH: $CI_COMMIT_BRANCH
    PARENT_SERVICE_LOGIN: $SERVICE_LOGIN
    PARENT_SERVICE_TOKEN: $SERVICE_TOKEN
    PARENT_SERVICE_ACCESS_TOKEN: $SERVICE_ACCESS_TOKEN
    PARENT_PROJECT_ID: $CI_PROJECT_ID
    PARENT_STAGE_PREFIX: photosobliquesapi:deploy-karbon:prepare
    
photosobliquesapi:deploy-karbon:qua:
  extends: .photosobliquesapi:deploy-karbon
  needs:
    - job: photosobliquesapi:deploy-karbon:prepare:dev
      artifacts: true
  only:
    refs:
      - open/master
      - /.*karbonification.*/      
  variables:
    TARGET_ENV: dev
    FORCE_POD: "true"
    PARENT_COMMIT_BRANCH: $CI_COMMIT_BRANCH
    PARENT_SERVICE_LOGIN: $SERVICE_LOGIN
    PARENT_SERVICE_TOKEN: $SERVICE_TOKEN
    PARENT_SERVICE_ACCESS_TOKEN: $SERVICE_ACCESS_TOKEN
    PARENT_PROJECT_ID: $CI_PROJECT_ID
    PARENT_STAGE_PREFIX: photosobliquesapi:deploy-karbon:prepare
  when: manual
    
trivyscan:back: 
  extends: 
    - .trivy-scan
  stage: docker
  variables:
    TRIVY_DOCKER_SCAN: glregistry.boost.open.global/rennes-metropole/photosobliques/geor_photos_obliques_backend/rennes-metropole:open-develop
  only:
    refs:
      - open/develop


## Livraison Github
push-to-github:
  stage: delivering
  dependencies:
    - photosobliquesapi:docker2:build
  rules:
    - if: '$CI_COMMIT_TAG'
      when: manual
  script:
    - cd ci
    - apt install -y rsync
    - chmod +x push-to-github.sh
    - ./push-to-github.sh
  variables:
    SOURCE_REPOSITORY: $CI_PROJECT_DIR
    # Les variables GITHUB_RM_ACCOUNT, GITHUB_RM_LOGIN et GIT_TOKEN sont à définir manuellement avant de lancer le job
    GIT_REMOTE: "https://$GITHUB_RM_ACCOUNT:$GIT_TOKEN@github.com/sigrennesmetropole/geor_photos_obliques_backend.git"
    COMMIT_MESSAGE: $GITHUB_COMMIT_MESSAGE